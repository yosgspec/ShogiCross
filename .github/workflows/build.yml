name: Build and Deploy

on:
  push:
    branches:
      - main

# 同時実行制御：GitHub Pagesのデプロイが重複しないように
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  Build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Setup NPM Modules
        run: npm install

      - name: Setup ShogiCross Module
        run: npm run setup

      - name: Build ShogiCross Module
        run: npm run building

      - name: Collect ShogiCross Module
        run: npm run collect

      - name: Minify ShogiCross Module
        run: npm run minify

      - name: Post ShogiCross Module
        run: npm run post

      - name: Deploy CDN
        run: npm run deploy:cdn

      - name: Deploy API Document
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_on: error
          command: npm run deploy:doc-api

      - name: Upload Source Artifact
        uses: actions/upload-artifact@v4
        with:
          name: src
          path: src

      - name: Upload CDN Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cdn
          path: cdn

  DeployPages:
    needs: Build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Download Source Artifact
        uses: actions/download-artifact@v4
        with:
          name: src
          path: src

      - name: Upload GitHub Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: src

      - name: Deploy GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  CheckVersion:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      PROJECT_VERSION: ${{steps.PROJECT_VERSION.outputs.value}}
      IS_NEW_VERSION: ${{steps.TRY_EXISTS_TAG.outcome == 'failure'}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get ShogiCross Version
        id: PROJECT_VERSION
        run: echo "value=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Try Exist Tag
        id: TRY_EXISTS_TAG
        continue-on-error: true
        run: |
          TAG_NAME="${{steps.PROJECT_VERSION.outputs.value}}"
          echo "Checking for tag ${TAG_NAME}..."
          git ls-remote --exit-code --tags origin "refs/tags/${TAG_NAME}"

  PublishNPM:
    needs: [CheckVersion, Build]
    if: needs.CheckVersion.outputs.IS_NEW_VERSION == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Download Module Artifact
        uses: actions/download-artifact@v4
        with:
          name: src
          path: src

      - name: Publish NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  ReleaseCDN:
    needs: [CheckVersion, Build]
    if: needs.CheckVersion.outputs.IS_NEW_VERSION == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download CDN Artifact
        uses: actions/download-artifact@v4
        with:
          name: cdn
          path: cdn

      - name: Push CDN And Version Tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add ./cdn
          if git diff --staged --quiet; then
            echo "No changes to CDN to commit."
          else
            git commit -m "Release ${{needs.CheckVersion.outputs.PROJECT_VERSION}} [skip ci]"
            git push
          fi
          git tag ${{needs.CheckVersion.outputs.PROJECT_VERSION}}
          git push origin ${{needs.CheckVersion.outputs.PROJECT_VERSION}}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{needs.CheckVersion.outputs.PROJECT_VERSION}}

  CheckUpdateServer:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      IS_UPDATE: ${{env.GIT_DIFF}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Diff package.json
        uses: technote-space/get-diff-action@v5
        with:
          PATTERNS: |
            server/package.json

  DeployServer:
    needs: [CheckUpdateServer]
    if: needs.CheckUpdateServer.outputs.IS_UPDATE
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      REGION: asia-northeast1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{vars.GOOGLE_CLOUD_ID}}
          credentials_json: ${{secrets.GCP_CREDENTIALS}}

      - name: Setup Docker
        run: gcloud auth configure-docker ${{env.REGION}}-docker.pkg.dev --quiet

      - name: Push Docker Image
        run: |
          IMAGE_TAG=${{env.REGION}}-docker.pkg.dev/${{vars.GOOGLE_CLOUD_ID}}/${{vars.GOOGLE_CLOUD_DOCKER_REPOSITORY}}/${{vars.GOOGLE_CLOUD_RUN_NAME}}:${{github.sha}}
          docker build -t $IMAGE_TAG ./server/
          docker push $IMAGE_TAG

      - name: Deploy Cloud Run
        run: |
          IMAGE_TAG=${{env.REGION}}-docker.pkg.dev/${{vars.GOOGLE_CLOUD_ID}}/${{vars.GOOGLE_CLOUD_DOCKER_REPOSITORY}}/${{vars.GOOGLE_CLOUD_RUN_NAME}}:${{github.sha}}
          gcloud run deploy ${{vars.GOOGLE_CLOUD_RUN_NAME}} \
            --image $IMAGE_TAG \
            --region ${{env.REGION}} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --set-env-vars PORT=8080 \
            --min-instances 0 \
            --max-instances 1 \
            --cpu 1 \
            --memory 512Mi \
            --concurrency 80
