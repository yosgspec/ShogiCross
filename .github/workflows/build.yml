name: Build and Deploy

on:
  push:
    branches:
      - main
      - act

# 同時実行制御：GitHub Pagesのデプロイが重複しないように
concurrency:
  group: "pages"
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  BuildModule:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache NPM Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: main-npm-${{hashFiles('package.json')}}

      - name: Setup NPM Modules
        run: npm install

      - name: Setup ShogiCross Module
        run: npm run setup

      - name: Push Update Document Pages
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add src/
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update Document Pages [skip ci]"
            git push
          fi

      - name: Build ShogiCross Module
        run: npm run compile

      - name: Stage ShogiCross Module
        run: npm run stage

      - name: Minify ShogiCross Module
        run: npm run minify

      - name: Upload Source Artifact
        uses: actions/upload-artifact@v4
        with:
          name: src
          path: src

  BuildFont:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: font
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache NPM Modules
        uses: actions/cache@v4
        with:
          path: font/node_modules
          key: font-npm-${{hashFiles('font/package.json')}}

      - name: Cache TTF
        id: cache-ttf
        uses: actions/cache@v4
        with:
          path: font/ttf
          key: font-ttf-${{hashFiles('src/ShogiCross/data/canvasFont.js')}}

      - name: Setup NPM Modules
        run: npm install

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: 'pypy3.11'
          cache: pip

      - name: Setup PIP Modules
        run: pip install .

      - name: Download TTF
        if: steps.cache-ttf.outputs.cache-hit != 'true'
        run: npm run build:download-ttf

      - name: Collect Font Chars
        run: npm run build:collect-chars

      - name: Convert TTF To WOFF2
        run: npm run build:conv-ttf2woff2

      - name: Upload Font Artifact
        uses: actions/upload-artifact@v4
        with:
          name: font
          path: font

  Stage:
    needs: [BuildModule, BuildFont]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Module Artifact
        uses: actions/download-artifact@v4
        with:
          name: src
          path: src

      - name: Download Font Artifact
        uses: actions/download-artifact@v4
        with:
          name: font
          path: font

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache NPM Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: main-npm-${{hashFiles('package.json')}}

      - name: Setup NPM Modules
        run: npm install

      - name: Package ShogiCross Module
        run: npm run package

      - name: Deploy CDN
        run: npm run deploy:cdn

      - name: Deploy API Document
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_on: error
          command: npm run deploy:doc-api

      - name: Upload Source Artifact
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          name: src
          path: src

      - name: Upload CDN Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cdn
          path: cdn

      - name: Upload App Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: app

  DeployPages:
    needs: [Stage]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Source Artifact
        uses: actions/download-artifact@v4
        with:
          name: src
          path: src

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload GitHub Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: src

      - name: Deploy GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  CheckVersion:
    runs-on: ubuntu-latest
    outputs:
      PROJECT_VERSION: ${{steps.PROJECT_VERSION.outputs.value}}
      IS_NEW_VERSION: ${{steps.TRY_EXISTS_TAG.outcome == 'failure'}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get ShogiCross Version
        id: PROJECT_VERSION
        run: echo "value=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Try Exist Tag
        id: TRY_EXISTS_TAG
        continue-on-error: true
        run: |
          TAG_NAME="${{steps.PROJECT_VERSION.outputs.value}}"
          echo "Checking for tag ${TAG_NAME}..."
          git ls-remote --exit-code --tags origin "refs/tags/${TAG_NAME}"

  PublishNPM:
    needs: [CheckVersion, Stage]
    if: >
      github.ref == 'refs/heads/main'
      && needs.CheckVersion.outputs.IS_NEW_VERSION == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Module Artifact
        uses: actions/download-artifact@v4
        with:
          name: src
          path: src

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Publish NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  ReleaseCDN:
    needs: [CheckVersion, Stage]
    if: >
      github.ref == 'refs/heads/main'
      && needs.CheckVersion.outputs.IS_NEW_VERSION == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download CDN Artifact
        uses: actions/download-artifact@v4
        with:
          name: cdn
          path: cdn

      - name: Push CDN And Version Tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # cdnブランチが存在しない場合、孤立ブランチとして作成
          if git fetch origin cdn; then
            git switch cdn
          else
            git checkout --orphan cdn
            # 管理対処ファイルをすべて削除(除外ファイル除く)
            git rm -rf .
          fi
          mv ./cdn/* .
          git add .
          if git diff --staged --quiet; then
            echo "No changes to CDN to commit."
          else
            git commit -m "Release ${{needs.CheckVersion.outputs.PROJECT_VERSION}}"
            git push origin cdn --set-upstream
          fi
          git tag ${{needs.CheckVersion.outputs.PROJECT_VERSION}}
          git push origin ${{needs.CheckVersion.outputs.PROJECT_VERSION}}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{needs.CheckVersion.outputs.PROJECT_VERSION}}

  SetUpGoogleCloud:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Update Google Cloud
        uses: technote-space/get-diff-action@v5
        with:
          PATTERNS: |
            server/setup_gcloud.sh

      - name: Auth Google Cloud
        if: ${{env.GIT_DIFF}}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{secrets.GCP_CREDENTIALS}}

      - name: Setup Google Cloud SDK
        if: ${{env.GIT_DIFF}}
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{vars.GCP_ID}}

      - name: Setup Server
        if: ${{env.GIT_DIFF}}
        env:
          GCP_ID: ${{vars.GCP_ID}}
          GCP_RUN_NAME: ${{vars.GCP_RUN_NAME}}
          GCP_DOCKER_REPO: ${{vars.GCP_DOCKER_REPO}}
        run: |
          chmod +x ./server/setup_gcloud.sh
          ./server/setup_gcloud.sh

  CheckDiffServer:
    runs-on: ubuntu-latest
    outputs:
      IS_DIFF: ${{env.GIT_DIFF}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Diff package.json
        uses: technote-space/get-diff-action@v5
        with:
          PATTERNS: |
            server/package.json

  CheckServerVersion:
    runs-on: ubuntu-latest
    outputs:
      SERVER_VERSION: ${{steps.SERVER_VERSION.outputs.value}}
      IS_NEW_VERSION: ${{steps.TRY_EXISTS_TAG.outcome == 'failure'}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get Server Version
        id: SERVER_VERSION
        run: echo "value=$(node -p "require('./server/package.json').version")" >> $GITHUB_OUTPUT

      - name: Try Exist Tag
        id: TRY_EXISTS_TAG
        continue-on-error: true
        run: |
          TAG_NAME="server${{steps.SERVER_VERSION.outputs.value}}"
          echo "Checking for tag ${TAG_NAME}..."
          git ls-remote --exit-code --tags origin "refs/tags/${TAG_NAME}"

  DeployServer:
    needs: [CheckDiffServer, CheckServerVersion, SetUpGoogleCloud]
    if: >
      github.ref == 'refs/heads/main'
      && (
        needs.CheckDiffServer.outputs.IS_DIFF
        || needs.CheckServerVersion.outputs.IS_NEW_VERSION == 'true'
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      REGION: asia-northeast1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{secrets.GCP_CREDENTIALS}}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{vars.GCP_ID}}

      - name: Setup Docker
        run: gcloud auth configure-docker ${{env.REGION}}-docker.pkg.dev --quiet

      - name: Push Docker Image
        run: |
          IMAGE_TAG=${{env.REGION}}-docker.pkg.dev/${{vars.GCP_ID}}/${{vars.GCP_DOCKER_REPO}}/${{vars.GCP_RUN_NAME}}:${{github.sha}}
          docker build -t $IMAGE_TAG ./server/
          docker push $IMAGE_TAG

      - name: Deploy Cloud Run
        run: |
          IMAGE_TAG=${{env.REGION}}-docker.pkg.dev/${{vars.GCP_ID}}/${{vars.GCP_DOCKER_REPO}}/${{vars.GCP_RUN_NAME}}:${{github.sha}}
          gcloud run deploy ${{vars.GCP_RUN_NAME}} \
            --image $IMAGE_TAG \
            --region ${{env.REGION}} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --min-instances 0 \
            --max-instances 1 \
            --cpu 1 \
            --memory 512Mi \
            --concurrency 80

      - name: Push Version Tag
        if: needs.CheckServerVersion.outputs.IS_NEW_VERSION == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag server${{needs.CheckServerVersion.outputs.SERVER_VERSION}}
          git push origin server${{needs.CheckServerVersion.outputs.SERVER_VERSION}}

  BuildAppWindows:
    needs: [CheckVersion, Stage]
    if: >
      github.ref == 'refs/heads/main'
      && needs.CheckVersion.outputs.IS_NEW_VERSION == 'true'
      || github.ref == 'refs/heads/act'
    runs-on: windows-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download App Artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: app

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache NPM Modules
        uses: actions/cache@v4
        with:
          path: app/node_modules
          key: app-npm-${{hashFiles('app/package.json')}}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            app/src-tauri/target
          key: app-win-cargo-${{hashFiles('app/src-tauri/Cargo.lock')}}

      - name: Setup NPM Modules
        run: npm install

      - name: Build Tauri App
        run: npm run build

      - name: Move Application
        shell: bash
        run: |
          mv src-tauri/target/**.exe ShogiCross.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-windows-x64
          path: |
            app/ShogiCross.exe
            app/OFL.txt

  BuildAppLinux:
    needs: [CheckVersion, Stage]
    if: >
      github.ref == 'refs/heads/main'
      && needs.CheckVersion.outputs.IS_NEW_VERSION == 'true'
      || github.ref == 'refs/heads/act'
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download App Artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: app

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache NPM Modules
        uses: actions/cache@v4
        with:
          path: app/node_modules
          key: app-npm-${{hashFiles('app/package.json')}}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            app/src-tauri/target
          key: app-linux-cargo-${{hashFiles('app/src-tauri/Cargo.lock')}}

      - name: Setup Linux Liblary
        run: sudo npm run install:apt

      - name: Setup NPM Modules
        run: npm install

      - name: Build Tauri App
        run: npm run build

      - name: Move Application
        run: |
          mv src-tauri/target/**.AppImage ShogiCross.AppImage

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-linux-x64
          path: |
            app/ShogiCross.AppImage
            app/OFL.txt

  BuildAppAndroid:
    needs: [CheckVersion, Stage]
    if: >
      github.ref == 'refs/heads/main'
      && needs.CheckVersion.outputs.IS_NEW_VERSION == 'true'
      || github.ref == 'refs/heads/act'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download App Artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: app

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache NPM Modules
        uses: actions/cache@v4
        with:
          path: app/node_modules
          key: app-npm-${{hashFiles('app/package.json')}}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            app/src-tauri/target
          key: app-android-cargo-${{hashFiles('app/src-tauri/Cargo.lock')}}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Export Android Env
        run: |
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_ENV

      - name: Install NPM Modules
        run: npm install

      - name: Decode and Save Keystore
        run: echo "${{ secrets.TAURI_KEY_JKS_BASE64 }}" | base64 -d > shogicross.jks

      - name: Build Tauri App
        env:
          TAURI_KEY_PATH: ./shogicross.jks
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_KEY_ALIAS: ${{ secrets.TAURI_KEY_ALIAS }}
          TAURI_KEY_ALIAS_PASSWORD: ${{ secrets.TAURI_KEY_ALIAS_PASSWORD }}
        run: npm run build-apk

      - name: Move Application
        run: |
          mv src-tauri/gen/android/**.apk ShogiCross.apk

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-android
          path: |
            app/ShogiCross.apk
            app/OFL.txt

  ReleaseApp:
    needs: [CheckVersion, BuildAppWindows, BuildAppLinux, BuildAppAndroid]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download App Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-windows-x64
          path: app-windows-x64

      - name: Pack App Windows Artifact
        run: zip -r ShogiCross-win64.zip app-windows-x64

      - name: Download App Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-linux-x64
          path: app-linux-x64

      - name: Pack App Linux Artifact
        run: zip -r ShogiCross-linux64.zip app-linux-x64

      - name: Download App Android Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-android
          path: app-android

      - name: Pack App Android Artifact
        run: zip -r ShogiCross-android.zip app-android

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: app${{needs.CheckVersion.outputs.PROJECT_VERSION}}
          name: "Download ShogiCross App${{needs.CheckVersion.outputs.PROJECT_VERSION}}"
          body: |
            ShogiCrossのアプリ版ダウンロードページ。
            Android版は動かないため[こちら](https://shogicross.yosgspec.com/app.html)の右下「📥」ボタンからのPWA版インストールを推奨。
          draft: false
          prerelease: false
          files: |
            ShogiCross-win64.zip
            ShogiCross-linux64.zip
            ShogiCross-android.zip
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
