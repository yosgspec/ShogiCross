var ShogiCross=function(j){"use strict";const B="./json/ShogiCross/";function M(f){const t=new XMLHttpRequest;if(t.open("GET",`${B}${f}.json`,!1),t.send(),t.status===200)return JSON.parse(t.responseText);throw new Error("Failed to load JSON")}const A=M("canvasFont"),_=M("gameSoft"),z=M("games"),G=M("boards"),H=M("panels"),X=M("pieces"),tt=M("pieceRange"),et=M("pieceCost"),st=()=>[...new Set([...Object.values(H).map(({displayText:f})=>f).join("")+Object.values(X).map(({display:f})=>f?f.join(""):"").join("")])].sort().join("");Object.assign(A,{imported:!1,names:"",async importAsync(){if(this.imported)return;const f="https://fonts.googleapis.com/css2?family=",t=st(),e=new Date().getTime().toString();return this.names=A.fonts.map(s=>`"${s[0]}${e}"`).join(",")+",serif",Promise.all(A.fonts.map(async([s,i])=>{const r=s.replace(/ /g,"+"),n=`${f}${r}:wght@${i}&text=${t}`,a=await fetch(n);if(!a.ok)return;const h=(await a.text()).match(/url\(.+?\)/g);if(!h)throw new Error("Not found font.");for(const o of h){const l=new FontFace(`${s}${e}`,o);document.fonts.add(l),await l.load().catch(()=>{})}})).then(s=>this.imported=!0)}});function it(f){return new Promise(t=>{const e=new Image;e.src=f,e.onload=()=>t(e)})}const rt=[...new Set(Object.values(H).flatMap(({imgSrc:f})=>f??[]).concat(Object.values(X).flatMap(({imgSrc:f})=>f??[])))],P={imported:!1,images:{},async importAsync(){if(!this.imported)return Promise.all(rt.map(async f=>{this.images[f]=await it(f)})).then(f=>this.imported=!0)}},nt=f=>"image/"+f.replace("jpg","jpeg");async function ot(f,t="image",e="png",s="base64"){const i=nt(e),r=document.createElement("a");let n;s==="blob"?n=URL.createObjectURL(await new Promise(a=>f.toBlob(a),i)):n=f.toDataURL(i),r.href=n,r.download=`${t}.${e}`,r.click(),s==="blob"&&URL.revokeObjectURL(r.href)}class at{#t;#e;constructor(t,e,s,i,r,n,a,c,h){Object.assign(this,H[e]),this.ctx=t,this.center=s,this.middle=i,this.width=r,this.height=n,this.left=s-r/2,this.top=i-n/2,this.right=s+r/2,this.bottom=i+n/2,this.borderWidth=a,this.pX=c,this.pY=h,this.selectColor??="#FF000066",this.targetColor??="#00FF0066",this.piece=null,this.isSelected=!1,this.clearTarget(),this.attr??=[]}set isSelected(t){this.#t=this.hasAttr("keepOut")?!1:t}get isSelected(){return this.#t}get isTarget(){return 0<this.#e.length}clearTarget(){this.#e=[]}addTarget(t){this.#e.push(t)}hasTarget(t){return this.#e.includes(t)}hasAttr(t){return this.attr.includes(t)}checkRangeMouse(t,e){return this.left<=t&&t<this.right&&this.top<=e&&e<this.bottom}draw(){const{selectColor:t,targetColor:e}=this;this.imgSrc&&P.imported?this.drawImage():this.drawPanel(),this.isSelected&&this.drawMask(t),this.isTarget&&this.drawMask(e),this.piece?.draw()}drawImage(){const{ctx:t}=this,e=this.imgSrc,s=P.images[e];s&&(t.save(),t.translate(this.left,this.top),t.drawImage(s,0,0,this.width,this.height),t.restore())}drawPanel(){const{ctx:t,left:e,top:s,center:i,middle:r,width:n,height:a,displayText:c,textRotate:h}=this;if(t.fillStyle=this.backgroundColor,t.strokeStyle=this.borderColor,t.lineWidth=this.borderWidth,t.save(),t.translate(e,s),t.fillRect(0,0,n,a),this.intersect?(t.lineWidth=this.borderWidth,t.beginPath(),t.moveTo(n/2,0),t.lineTo(n/2,a),t.moveTo(0,a/2),t.lineTo(n,a/2),t.closePath(),t.stroke()):t.strokeRect(0,0,n,a),t.lineWidth=this.borderWidth/2,t.beginPath(),this.borderSlashLeft&&(t.moveTo(0,0),t.lineTo(n,a)),this.borderSlashRight&&(t.moveTo(n,0),t.lineTo(0,a)),t.closePath(),t.stroke(),t.restore(),c){t.save(),t.translate(i,r),t.fillStyle=this.borderColor;const o=h?h*Math.PI/180:0;t.rotate(o);const l=Math.min(this.width,this.height)*.6;t.font=`${l}px ${A.names}`;const g=t.measureText(c).width,p=l/2*.8;t.fillText(c,-g/2,p),t.restore()}}drawMask(t){const{ctx:e}=this;e.fillStyle=t,e.fillRect(this.left,this.top,this.width,this.height)}toString(t=!1){return t?`｜${this.text.slice(-1).replace(/　/g,"・")}`:this.text}}class y{static size=45;static useRankSize=!0;static isDrawShadow=!0;static degChars={0:"▲",90:"≫",180:"▽",270:"＜"};static charDegs={};static rankRatio={KR:1,SR:.965,R:.935,UC:.9,C:.865};get rank(){return this.cost<=0?"KR":20<=this.cost?"SR":10<=this.cost?"R":5<=this.cost?"UC":"C"}static getPieces(t,e={}){const s=new Map(Object.entries(JSON.parse(JSON.stringify(X))));for(const[r,n]of s)n.attr??=[],n.unit&&n.unit==="成"&&(n.base=n);for(const[r,n]of s){if(!n.promo||typeof n.promo!="string")continue;const a=[...n.promo];n.promo={};for(const c of a){const h=s.get(c);h.attr.push("promoted"),h.unit="成",n.promo[c]=h,s.set(c,{...n,...h})}}[...s].forEach(([r,n],a)=>{n.id=a,n.char=r,s.set(r,new y(t,n,e))});const i=Object.fromEntries(s);for(const[r,n]of s)n.alias.forEach((a,c)=>{const h=n.clone(),o=[...h.display];h.displayPtn=c+1,h.display=o,h.alias[c]=r,i[a]=h});return i}static stringToPiece(t,e){if(!e)return null;const[s,i]=[...e],r=y.charDegs[s];if(!r||!t[i])return null;const n=t[i].clone();return n.deg=r,n}static piecesToList(t){return Object.entries(t).sort(([e,{id:s}],[i,{id:r}])=>Math.sign(s-r))}set deg(t){this.rad=t%360*Math.PI/180}get deg(){return this.rad%360/(Math.PI/180)}get left(){return this.center-this.size*.8/2}get top(){return this.middle-this.size/2}get right(){return this.center+this.size*.8/2}get bottom(){return this.middle+this.size/2}get zoom(){let t=this.size/100;return this.useRankSize&&(t*=y.rankRatio[this.rank]),t}constructor(t,e,s={}){const{displayPtn:i=0,deg:r=0,size:n=y.size,useRankSize:a=y.useRankSize,isDrawShadow:c=y.isDrawShadow,isMoved:h=!1}=s;Object.assign(this,e),this.ctx=t,this.display??=[""],this.imgSrc??=null,this.alias=[...this.alias??""],this.displayPtn=i,this.game=z[this.gameName],this.cost=et[this.char]??1,this.center=0,this.middle=0,this.deg=r,this.size=n,this.useRankSize=a,this.isDrawShadow=c,this.isRotateImg??=!0,this.isMoved=h,this.isSelected=!1,this.attr??=[];try{Object.entries(this.range).forEach(([o,l])=>{Array.isArray(l)||(this.range[o]=tt[l].map(g=>[...g]))})}catch(o){throw console.error(o),e}}clone(){const{displayPtn:t,deg:e,size:s,isMoved:i}=this;return new y(this.ctx,{...this},{displayPtn:t,deg:e,size:s,isMoved:i})}turnFront(){Object.assign(this,this.base)}promotion(t){const{promo:e}=this;if(!e)throw Error(`promo=${t}, Not plomote piece.`);if(!e in e)throw Error(`promo=${t}, Plomote key is missing.`);if(this.hasAttr("promoted"))throw Error(`promo=${t}, Promoted piece.`);Object.assign(this,e[t]),this.char=t}hasAttr(t){return this.attr.includes(t)}checkRangeMouse(t,e){return this.left<=t&&t<this.right&&this.top<=e&&e<this.bottom}getRange(){const t=0|this.deg,e=JSON.parse(JSON.stringify(this.range));return Object.keys(e).forEach(s=>{if(t!==0){if(![90,180,270].includes(t))throw Error(`deg=${t}, deg need multiple of 90.`);if([90,270].includes(t)){const i=r=>r[0].map((n,a)=>r.map(c=>c[a]));e[s]=i(e[s])}[180,270].includes(t)&&e[s].reverse(),e[s].forEach(i=>{[90,180].includes(t)&&i.reverse()})}}),e}async draw(){const t="#FF000055";this.imgSrc&&P.imported?(this.drawImage(),this.isSelected&&this.drawMaskImage(t)):(this.drawPiece(),this.isSelected&&this.drawMask(t))}drawImage(){const{ctx:t,size:e}=this,s=this.imgSrc[this.displayPtn],i=P.images[s];if(!i)return;t.save(),t.translate(this.center,this.middle),this.isRotateImg&&t.rotate(this.rad);let r,n;i.width*.9<i.height?(r=i.width/i.height*e,n=e):(r=e,n=i.height/i.width*e),t.drawImage(i,-r/2,-n/2,r,n),t.restore()}drawMaskImage(t){const{ctx:e,size:s}=this;e.fillStyle=t,e.save();const i=s*.9,r=s;e.translate(this.center,this.middle),e.fillRect(-i/2,-r/2,i,r),e.restore()}makePath(t){const{ctx:e}=this;e.translate(this.center,this.middle),e.rotate(this.rad),e.beginPath(),e.moveTo(-30*t,-40*t),e.lineTo(0*t,-50*t),e.lineTo(30*t,-40*t),e.lineTo(45*t,50*t),e.lineTo(-45*t,50*t),e.closePath()}drawPieceShadow(t){if(!this.isDrawShadow)return;const{ctx:e}=this;e.save(),e.translate(0,10*t),this.drawMask("#00000066"),e.restore()}drawPiece(){const{ctx:t,game:e,zoom:s}=this;let i,r,n;this.hasAttr("promoted")?(i=e.promoteFontColor??e.fontColor??"#000000",r=e.promoteBackgroundColor??e.backgroundColor??"#FFFFFF",n=e.promoteBorderColor??e.borderColor??"#FF3300"):(i=e.fontColor??"#000000",r=e.backgroundColor??"#FFFFFF",n=e.borderColor??"#777777"),t.strokeStyle=n,t.fillStyle=r,t.lineWidth=8*s,this.drawPieceShadow(s),t.save(),this.makePath(s),t.stroke(),t.fill(),t.fillStyle=i;const a=[...""+this.display[this.displayPtn]],c=40*s;t.font=`${c}px ${A.names}`,t.textAlign="center",a.forEach((h,o)=>{const l=a.length===1?c/2:o*c;t.fillText(h,0,l)}),t.restore()}drawMask(t){const{ctx:e,zoom:s}=this;e.fillStyle=t,e.save(),this.makePath(s),e.fill(),e.restore()}toString(){return y.degChars[this.deg]+this.char}}Object.entries(y.degChars).forEach(([f,t])=>{y.charDegs[t]=f});const ct=[["default",{isAttack:!1}],["attack",{isAttack:!0}],["start",{isAttack:!1}],["castling",{isAttack:!1}],["enPassant",{isAttack:!0}],["palaceSlash",{isAttack:!1}],["palaceSlash",{isAttack:!0}]],ht=[["O",{isOwn:!0}],["o",{}]],lt=[["o"],["A",{child:["a"]}],["B",{child:["b"]}],["C",{child:["c"]}],["D",{child:["d"]}],["E",{child:["a","e"]}],["F",{child:["a","f"]}],["G",{child:["b","g"]}],["H",{child:["b","h"]}],["I",{child:["c","i"]}],["J",{child:["c","j"]}],["K",{child:["d","k"]}],["L",{child:["d","l"]}]],K=[["*",{}],["+",{jmps:1}],["|",{jmps:1,moves:1}]];for(let f=1;f<=9;f++)K.push([""+f,{moves:f}]);function dt(f){const t=[];let e,s;for(let i=0;i<f.length;i++)for(let r=0;r<f[i].length;r++){const n=f[i][r];for(let[a,{isOwn:c}]of ht)n===a&&(t.push({isOwn:c,oX:r,oY:i}),c&&([e,s]=[r,i]))}return t.map(i=>(i.offsetX=i.oX-e,i.offsetY=i.oY-s,i))}function ft(f,t,e,s){const{field:i,yLen:r,enPassant:n}=f;function a(d,u){return i[u]&&i[u][d]&&!i[u][d].hasAttr("keepOut")}function c(d){return d.piece&&t.hasAttr("po")&&d.piece.hasAttr("po")}function h(d){return d.piece&&!t.isMoved&&!d.piece.isMoved&&t.hasAttr("pao")&&t.cost<d.piece.cost}function o(d,u,k,m="",b=!0){if(!i[k]||!i[k][u])return!1;const C=i[k][u];return!C||c(C)||h(C)||m==="enPassant"&&!n.isTarget(C,t)||t.hasAttr("inPalace")&&!C.hasAttr("palace")||m.indexOf("palace")===0&&!(C.hasAttr(m)&&i[s][e].hasAttr(m))||t.hasAttr("unCrossRiver")&&r-(0|r/2)<=f.getRow(u,k,t.deg)?!1:d?i[k][u].piece?b?t.deg!==i[k][u].piece.deg:!0:!1:!i[k][u].piece}function l(d,u,k,m,b){for(const C of u)for(let R=0;R<d.length;R++)for(let L=0;L<d[R].length;L++){const[E,x]=[L+e-m,R+s-b];if(!(!a(E,x)||o(k,0|E,0|x,"",!1)||d[R][L]!==C))return!0}return!1}function g(d,u,k){const m=i[k][u];m.addTarget(d),n.setTarget(m,t)}function p(d,[u,{isAttack:k}],{oX:m,oY:b,isOwn:C}){if(C)for(const[R,{child:L=[]}={}]of lt)for(let E=0;E<d.length;E++)for(let x=0;x<d[E].length;x++){const[v,$]=[x+e-m,E+s-b];!a(v,$)||!o(k,v,$,u)||d[E][x]!==R||l(d,L,!1,m,b)||g(u,v,$)}}function S(d,[u,{isAttack:k}],{oX:m,oY:b,isOwn:C,offsetX:R,offsetY:L}){if(!(!C&&!o(!1,e+R,s+L)))for(const[E,{jmps:x=0,moves:v=0}={}]of K){const $=!v||v===0;for(let T=b-1;T<=b+1;T++)for(let O=m-1;O<=m+1;O++){if(d[T][O]!==E||O===m&&T===b)continue;let F=x||0,D=v||0;const[J,mt]=[O-m,T-b];for(let V=e,Z=s;;){V+=J,Z+=mt;const W=V+R,I=Z+L;if(!a(W,I)||!$&&D===0)break;const N=F===0;N&&o(k,W,I,u,N)?(D--,g(u,W,I)):x<1&&D--;const Q=i[I][W];if(Q.piece&&(F--,N||c(Q)))break}}}}(function(){const d=t.getRange();d.attack??=d.default;for(const u of ct){const k=u[0];if(t.isMoved&&["start","castling"].includes(k))continue;const m=d[k];if(m)for(const b of dt(m))p(m,u,b),S(m,u,b)}})()}function gt(f){let t=!1,e=[],s=null,i=null;const{canvas:r}=f,n=(o,l,g=()=>{})=>{const p=window.getComputedStyle(r),S=o.target.getBoundingClientRect();let d=r.width/parseFloat(p.width),u=r.height/parseFloat(p.height);if(o.clientX)d*=o.clientX-S.left,u*=o.clientY-S.top;else if(0<o.touches.length){if(1<o.touches.length)return;d*=o.touches[0].clientX-S.left,u*=o.touches[0].clientY-S.top}else o.preventDefault(),[d,u]=e;f.field.forEach((k,m)=>k.forEach((b,C)=>l(b,d,u,C,m))),g(d,u),f.draw(),e=[d,u]},a=o=>{t=!0,n(o,(l,g,p)=>{const{piece:S,pX:d,pY:u}=l;S&&l.checkRangeMouse(g,p)&&(o.preventDefault(),S.isSelected=!0,s=l,ft(f,S,d,u))},(l,g)=>{for(const[p,S]of f.stand.stocks)for(let d=S.length-1;0<=d;d--)if(S[d].checkRangeMouse(l,g)){o.preventDefault(),S[d].isSelected=!0,i={deg:p,i:d};return}})},c=o=>{!t||!(s||i)||n(o,(l,g,p)=>{l.isSelected=l.checkRangeMouse(g,p)})},h=o=>{t=!1,n(o,(l,g,p)=>{l.checkRangeMouse(g,p)&&(s&&f.movePiece(s,l),i&&!l.piece&&f.stand.releasePiece(l,i))}),n(o,l=>{l.piece&&(l.piece.isSelected=!1),l.isSelected=!1,l.clearTarget()},()=>{for(const[l,g]of f.stand.stocks)for(let p=g.length-1;0<=p;p--)g[p].isSelected=!1;s=null,i=null})};return r.addEventListener("mousedown",a),r.addEventListener("mousemove",c),r.addEventListener("mouseup",h),r.addEventListener("touchstart",a),r.addEventListener("touchmove",c),r.addEventListener("touchend",h),{removeEvent(){r.removeEventListener("mousedown",a),r.removeEventListener("mousemove",c),r.removeEventListener("mouseup",h),r.removeEventListener("touchstart",a),r.removeEventListener("touchmove",c),r.removeEventListener("touchend",h)}}}class w{static#t=new Map([[0," "],[90,">"],[180,"v"],[270,"<"]]);static#e=new Map([...w.#t].map(([t,e])=>[t,new RegExp(e,"g")]));static#i=new Map([...w.#t].map(([t,e])=>[e,t]));static#r=new Map([[0,"先手の持駒"],[90,"次手の持駒"],[180,"後手の持駒"],[270,"四手の持駒"]]);static#n=new Map([...w.#r].map(([t,e])=>[e,t]));static#o=["","一","二","三","四","五","六","七","八","九"];static#a=["","十","二十","三十","四十","五十","六十","七十","八十","九十"];static#c(t,e=!0){if(!e&&t<=1)return"";const s=t%10,i=0|t/10;return w.#a[i]+w.#o[s]}static#h(t,e=!0){if(e&&t==="")return 1;if(!isNaN(t))return 0|t;let s=w.#a.findIndex(r=>r!==""&&new RegExp("^"+r).test(t));s<0&&(s=0);let i=w.#o.findIndex(r=>r!==""&&new RegExp(r+"$").test(t));return i<0&&(i=0),s*10+i}static#l(t){if(10<=t)return t;const e="０１２３４５６７８９",s=t%10;return e[s]}static#d=" ・";static#f(t){return t?w.#t.get(t.deg)+t.char:w.#d}static#s(t,e=0){const s=new Map;return t.stocks.get(e).forEach(({char:i})=>{s.has(i)||s.set(i,0),s.set(i,s.get(i)+1)}),w.#r.get(e)+"："+[...s].map(([i,r])=>i+w.#c(r,!1)).join(" ")}static convSetText(t){const e=[],s=[];t.split(/\r|\n|\r\n/).forEach(n=>{[...w.#n.keys()].some(a=>new RegExp(`^${a}`).test(n))?s.push(n):e.push(n.slice(1))});let i=e.slice(2,-1).join(`
`);w.#e.forEach((n,a)=>{i=i.replace(n,y.degChars[a])});const r=s.flatMap(n=>{const[a,c]=n.split(/：/);if(c==="")return"";const h=w.#n.get(a),o=y.degChars[h];return c.split(/\s/).map(g=>{const p=g[0],S=g.slice(1);return(o+p).repeat(w.#h(S))})}).join("");return`${i}
${r}`}static getText(t){const{field:e,xLen:s,players:i,stand:r}=t;let n=` ${[...Array(s).keys()].map(p=>` ${w.#l(s-p)}`).join("")}
+${Array(s).fill("---").join("")}+
`,a=`
+${Array(s).fill("---").join("")}+`,c="|",h="",o=`
`,l=`${w.#s(r,180)}
`,g=`${w.#s(r,0)}`;return i!==2&&(l=`${w.#s(r,270)}
`+l,g=`${w.#s(r,90)}
`+g),l+n+e.map((p,S)=>c+p.map(d=>w.#f(d.piece)).join(h)+c+w.#c(S+1)).join(o)+a+`
`+g}}class U{static#t=[180,90,270,0];constructor(t){this.board=t;const{top:e,right:s,bottom:i,width:r,height:n,panelWidth:a,panelHeight:c,xLen:h,yLen:o}=t;this.clear(),this.left=s*1.02,this.top=e,this.width=r/2,this.height=n,this.right=this.left+this.width,this.bottom=i,this.pitchWidth=a/2,this.pitchHeight=c,this.xLen=h,this.yLen=o}clear(){this.stocks=new Map(U.#t.map(t=>[t,[]]))}releasePiece(t,e={}){const{deg:s,i}=e,{board:r}=this,n=this.stocks.get(s);t.piece=n[i],n[i].center=t.center,n[i].middle=t.middle,r.addRecord(t,{end:"打"}),n.splice(i,1)}add(t){const e=this.stocks.get(t.deg);t.turnFront(),e.push(t),e.sort((s,i)=>Math.sign(s.id-i.id))}capturePiece(t,e,s=!1,i=!1){i||!e||!(s||t.hasAttr("capture"))||e.hasAttr("king")||e.hasAttr("cantCapture")||(e.deg=t.deg,e.isMoved=!0,this.add(e))}draw(){const{board:t,left:e,top:s,width:i,height:r,pitchWidth:n,pitchHeight:a}=this,{ctx:c,xLen:h,yLen:o}=t;c.fillStyle=t.backgroundColor,c.strokeStyle=t.borderColor,c.lineWidth=t.borderWidth,c.save(),c.translate(e,s),c.fillRect(0,0,i,r),c.strokeRect(0,0,i,r),c.restore(),[...this.stocks.values()].forEach((l,g)=>{let p=0;l=l.slice(-o/4*h);for(let S=0|o/4*g;S<o/4*(g+1);S++)for(let d=0;d<h;d++){const u=e+n*(d+1),k=s+a*(S+1),m=l[p++];if(m==null)break;m.center=u,m.middle=k,m.draw()}})}toString(t=!1){const{xLen:e}=this.board,s=[...this.stocks.values()].flat().filter(n=>n);let i=0<s.length?`
`+"―".repeat(e*2)+`
`:"",r=s.map(n=>""+n).join("");if(!t){i="";for(const n of Object.values(y.degChars))r=r.replace(n,`
${n}持駒：${n}`)}return i+r}}const ut=Object.keys(y.degChars),q=()=>({panel:null,piece:null});class pt{constructor(){this.degs={},ut.forEach(t=>this.degs[t]=q())}clear(t){this.degs[t]=q()}setTarget(t,e){t.hasTarget("start")&&e.hasAttr("enPassant")&&(this.degs[e.deg].panel=t)}setMoved(t){const{piece:e}=t,s=this.degs[e.deg];e&&t===s.panel?s.piece=e:this.clear(e.deg)}isTarget(t,e){return!t||!t.piece?!0:t.piece.hasAttr("enPassant")?t.piece===this.degs[t.piece.deg].piece:!1}}class Y{static run(t,e){const{playBoard:s,playPieces:i,onDrawed:r}=e,n=i.some(({gameName:c},h)=>1<h&&c)?4:2,a=new Y(t,s,{...e,players:n,onDrawed:r});return i.forEach(({gameName:c,pieceSet:h},o)=>{if(c){h??="default";try{a.putStartPieces(o,c,h)}catch{}}}),a.onDrawed=r,a}constructor(t,e,s){const{players:i=2,canvasWidth:r=void 0,canvasHeight:n=void 0,canvasFit:a="overflow",boardLeft:c=5,boardTop:h=5,panelWidth:o=50,panelHeight:l=0|o*1.1,pieceSize:g=0|o*.9,useRankSize:p=!0,isDrawShadow:S=!0,borderWidth:d=Math.min(o,l)/30,useStand:u=!1,backgroundColor:k="#00000000",autoDrawing:m=!0,onDrawed:b,onGameOver:C=$=>alert(`プレイヤー${$+1}の敗北です。`),freeMode:R=!1}=s,L=A.importAsync(),E=P.importAsync();this.canvas=t;const x=t.getContext("2d");if(x.clearRect(0,0,t.width,t.height),this.ctx=x,this.pieces=y.getPieces(x,{size:g,useRankSize:p,isDrawShadow:S}),Object.assign(this,G[e]),![2,4].includes(i))throw Error(`players=${i}, players need 2 or 4.`);this.players=i,this.left=c,this.top=h,this.panelWidth=o,this.panelHeight=l,this.borderWidth=d,this.pieceSize=g,this.canvasBackgroundColor=k,this.field=this.field.map(($,T)=>[...$].map((O,F)=>{const D=c+o*(F+1),J=h+l*(T+1);return new at(x,O,D,J,o,l,d,F,T)})),this.xLen=this.field[0].length,this.yLen=this.field.length,this.width=this.panelWidth*(this.xLen+1),this.height=this.panelHeight*(this.yLen+1),this.right=c+this.width,this.bottom=h+this.height,this.stand=new U(this),t.width=r??(u?this.stand.right:this.right)+5,t.height=n??this.bottom+5;const{style:v}=t;a==="overflow"?(v.maxWidth===""&&(v.maxWidth="97vw"),v.maxHeight===""&&(v.maxHeight="97vh")):a==="horizontal"?v.width===""&&(v.width="97vw"):a==="vertical"?v.height===""&&(v.height="97vh"):a==="parentOverflow"?(v.maxWidth===""&&(v.maxWidth="100%"),v.maxHeight===""&&(v.maxHeight="100%")):a==="parentHorizontal"?v.width===""&&(v.width="100%"):a==="parentVertical"&&v.height===""&&(v.height="100%"),this.autoDrawing=m,m&&(L.then(()=>this.draw()),E.then(()=>this.draw()),this.draw()),this.onDrawed=b,this.onGameOver=C,this.gameAlives=new Map([...Array(this.players).keys()].map($=>[this.#t($),!0])),this.freeMode=R,this.record=[],this.uiControl=gt(this),this.enPassant=new pt}close(){this.uiControl.removeEvent()}#t(t){let e=t;0<e&&e<4&&(e=0|e*360/this.players);do e=(e+360)%360;while(e<0);return e}rotateField(t){const{xLen:e,yLen:s}=this;if(t=this.#t(t),t!==0){if(![90,180,270].includes(t))throw Error(`deg=${t}, deg need multiple of 90.`);if([90,270].includes(t)){const i=r=>r[0].map((n,a)=>r.map(c=>c[a]));if(e!==s)throw Error(`cols=${e} != rows=${s}, Not rows = cols.`);this.field=i(this.field)}[180,270].includes(t)&&this.field.reverse(),this.field.forEach(i=>{i.forEach(r=>{r.piece&&(r.piece.deg+=t)}),[90,180].includes(t)&&i.reverse()})}}putStartPieces(t,e,s="default"){const{pieces:i}=this,r=this.#t(t);this.rotateField(r);const n=z[e].position[this.xLen][s];if(!n)throw Error(`games["${e}"].position["${this.xLen}"]["${s}"]is null.`);n.forEach((a,c)=>{if(a.length<this.xLen)throw Error(a.join(""));const h=c+this.yLen-n.length;[...a].forEach((o,l)=>{if(!i[o])return;const g=i[o].clone(),p=this.field[h][l];g.center=p.center,g.middle=p.middle,p.piece=g})}),this.rotateField(-r),this.autoDrawing&&this.draw()}putNewPiece(t,e,s,i,r={}){const{displayPtn:n=0,isMoved:a=!1}=r,{pieces:c}=this,h=this.#t(i);typeof t=="string"&&(t=new y(this.ctx,c[t],{displayPtn:n,deg:h,isMoved:a}));const o=this.field[s][e];t.center=o.center,t.middle=o.middle,o.piece=t,this.autoDrawing&&this.draw()}setTextPieces(t){const{field:e,pieces:s,xLen:i,yLen:r}=this,n="持駒：";0<t.indexOf(n)&&(t=w.convSetText(t));const c=[t].concat([..."┏━┯┓┗┷┛┃│┠─┼┨―"],Object.values(y.degChars).map(o=>`
`+o+n)).reduce((o,l)=>o.replace(new RegExp(l,"g"),"")).replace(/\n\n/g,`
`).replace(/　/g,"・").trim().split(/\n/).map(o=>o.match(/.{2}/g));for(let o=0;o<r;o++)for(let l=0;l<i;l++)try{const g=c[o][l],p=y.stringToPiece(s,g);p.center=e[o][l].center,p.middle=e[o][l].middle,e[o][l].piece=p}catch{e[o][l].piece=null}this.stand.clear();const h=c[r];h&&h.forEach(o=>{const l=y.stringToPiece(s,o);l&&this.stand.add(l)}),this.autoDrawing&&this.draw()}getRow(t,e,s,i=0){const{xLen:r,yLen:n}=this;return s=this.#t(s+i),s===0?n-1-e:s===90?t:s===180?e:s===270?r-1-t:-1}getCol(t,e,s,i=0){const{xLen:r,yLen:n}=this;return s=this.#t(s+i),s===0?t:s===90?n-1-e:s===180?r-1-t:s===270?e:-1}checkCanPromo(t){const{yLen:e}=this,{piece:s,pX:i,pY:r}=t,{deg:n}=s,[a,c]=[s.game.promoLine,s.forcePromoLine].map(o=>e-o-(0|this.promoLineOffset));let h;return this.sidePromo?h=Math.max(...Object.keys(y.degChars).map(o=>0|o).filter(o=>o!==n).map(o=>this.getRow(i,r,o,180))):h=this.getRow(i,r,n),{canPromo:a<=h,forcePromo:c<=h}}#e(){[...this.gameAlives].forEach(([t,e],s)=>{e&&(this.field.some(i=>i.some(({piece:r})=>r&&r.deg===t&&r.hasAttr("king")))||(this.gameAlives.set(t,!1),this.onGameOver(s)))})}#i(t,e,s,i){const{freeMode:r}=this,{piece:n}=e;if(!n.promo||n.hasAttr("promoted")||!s){this.addRecord(e,{fromPanel:t});return}do for(const[a,{name:c}]of Object.entries(n.promo))if(confirm(`成りますか?
	${n.char}:${n.name}
	　↓
	${a}:${c}`)){this.addRecord(e,{fromPanel:t,end:"成"}),n.promotion(a);return}while(!r&&i);this.addRecord(e,{fromPanel:t,end:"不成"})}movePiece(t,e){const{stand:s,freeMode:i,enPassant:r}=this;if(!t||e.hasAttr("keepOut")||e.piece===t.piece||e.piece?.deg===t.piece.deg||!this.freeMode&&!e.isTarget)return;let{canPromo:n,forcePromo:a}=this.checkCanPromo(t);s.capturePiece(t.piece,e.piece,e.hasAttr("capture"),e.hasAttr("cantCapture")),e.piece=t.piece,t.piece=null;const{piece:c}=e;c.center=e.center,c.middle=e.middle,c.isMoved=!0;const h=this.checkCanPromo(e);n||=h.canPromo,a||=h.forcePromo,r.setMoved(e),this.#i(t,e,n,a),this.#e()}addRecord(t,e={}){const{fromPanel:s,end:i=""}=e,{piece:r}=t;this.record.push({to:{pX:t.pX,pY:t.pY},from:{pX:s?.pX,pY:s?.pY},deg:r.deg,pieceChar:r.char,end:i})}getTextRecord(){const t=({pX:s})=>s==null?"*":(this.xLen-s).toString(36),e=({pY:s})=>s==null?"*":(s+1).toString(36);return this.record.map(({to:s,from:i,deg:r,pieceChar:n,end:a})=>`${y.degChars[r]}${t(s)}${e(s)}${n}${a} (${t(i)}${e(i)})`).join(`
`)}draw(){const{ctx:t,canvas:e,left:s,top:i,width:r,height:n,panelWidth:a,panelHeight:c}=this;t.restore(),t.save(),t.clearRect(0,0,e.width,e.height),t.fillStyle=this.canvasBackgroundColor,t.fillRect(0,0,e.width,e.height),t.fillStyle=this.backgroundColor,t.lineWidth=this.borderWidth,t.strokeStyle=this.borderColor,t.save(),t.translate(s,i),t.fillRect(0,0,r,n),t.strokeRect(0,0,r,n),t.translate(a/2,c/2),t.strokeRect(0,0,r-a,n-c),t.restore(),this.stand.draw(),this.field.forEach(h=>{h.forEach(o=>{o.draw()})}),this.onDrawed&&this.onDrawed(this)}get bodText(){return w.getText(this)}toString(t=!1){const{xLen:e}=this;let s="",i="",r="",n="",a=`
`;return t||(s=`┏${Array(e).fill("━━").join("┯")}┓
`,i=`
┗${Array(e).fill("━━").join("┷")}┛`,r="┃",n="│",a=`
┠${Array(e).fill("──").join("┼")}┨
`),s+this.field.map(c=>r+c.map(h=>""+(h.piece??h.toString(t))).join(n)+r).join(a)+i+this.stand.toString(t)}async downloadImage(t,e){await ot(this.canvas,t,e)}}return j.Board=Y,j.Piece=y,j.boards=G,j.canvasFont=A,j.canvasImage=P,j.gameSoft=_,j.games=z,Object.defineProperty(j,Symbol.toStringTag,{value:"Module"}),j}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
